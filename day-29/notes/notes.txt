
Inheritance in Python:
    Inheritance is used to aquire properties and methods from another class.

Achieving inheritance in Python:
    using class definitions 

class Parent:
    def __init__(self):
        self.name = "PARENT"

    def display_info(self):
        print("Parent Name: ", self.name)


class Child(Parent):
    def __init__(self):
        super().__init__()
        print("Child class initialized.")

    def child_info(self):
        print("Accessing Child class info:")

child =Child() # Child object will be aquired properties and methods of Parent class And then child object will be created.
print("Child Name: ", child.name)  # Accessing Parent class attribute
child.child_info()
child.display_info()  # Accessing Parent class method



Uses of Inheritance in Python:
    code can be used again and again, there's no need of writing code again and again.
    we can extend the code without doing any changes.
    clean and structured code.
    represent relationships in code.



1. Inheritance is used to aquired properties and methods from another class.
2. Child class can access attrributes and methods of Parent class.
3. No individual objects will be created for Parent class.
4. Child object will be aquired properties and methods of Parent class And then child object will be created.
5. If the Parent and Child clases having __init__ methods, then the parent class __init__ method will not be called automatically.
6. So, the init method of Parent class should be called explicitly using super() function.
7. If you need to have initialization of Parent class attributes in child class,
   you need to explicitly call the Parent class's `__init__` method using `super()`.


Types of Inheritance:
there are 5 types in Inheritance,
1. Single Inheritance
2. Multiple Inheritance
3. Multilevel Inheritance
4. Hierarchical Inheritance
5. Hybrid Inheritance


object level methods:
These methods operate on individual objects.
They take self as the first parameter, which refers to the object itself.

class level methods:
These methods operate on the class itself.
They take cls as the first parameter, which refers to the class.
Use the @classmethod decorator.

static level methods:
These methods do not take self or cls.
Use the @staticmethod decorator.
They are utility functions related to the class.


Underscores:

single underscore:
_name
A single underscore is used to indicate that a method or variable is meant to be private,
or used only inside the class or subclass.
But you can still access it from outside 

class Student:
    def __init__(self):
        self._name = "Phani"  # 'protected'

s = Student()
print(s._name)  # Allowed, but not recommended


double underscore:
__name
Python automatically changes the __name to _ClassName__name
Used to avoid name conflicts in subclasses.
Harder to access from outside

class Student:
    def __init__(self):
        self.__secret = "Hidden"

s = Student()
# print(s.__secret)        # AttributeError
print(s._Student__secret)  # Correct way (but discouraged)


__init__, __str__ :
These are used by Python internally for operator overloading, object creation, etc.

Method Overriding:
Method overriding allows a child class to provide a specific implementation of a method that is 
already defined in its parent class.
The method in the child class must have the same name, parameters, and signature as the method in the parent class.
When the method is called on an object of the child class, the child classâ€™s version is executed.
Useful for runtime polymorphism.
To customize or extend the behavior of a parent class method

Polymorphism:
Polymorphism means many forms.
Increases flexibility and reusability.
Helps in runtime decision making.
Supports clean, maintainable code using shared interfaces.
Types of Polymorphism:
1. Compile time (Method Overloading)
2. Run time (Method Overriding)
3. Duck Typing

Abstraction:
Hiding the internal implementation details and showing only the necessary features of an object.
In Python, abstraction can be achieved using:
Abstract Classes
Abstract Methods

